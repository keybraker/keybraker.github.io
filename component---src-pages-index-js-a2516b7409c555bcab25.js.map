{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/pages/index.js"],"names":["props","className","postClass","node","frontmatter","thumbnail","style","backgroundImage","childImageSharp","fluid","src","to","fields","slug","title","BlogIndex","location","data","siteTitle","site","siteMetadata","siteIcon","icon","console","log","posts","allMarkdownRemark","edges","postCounter","keywords","description","map","key","count","query","render"],"mappings":"uLAGe,WAAAA,GAAK,OAClB,6BACEC,UAAS,8BACPD,EAAME,UADC,KAELF,EAAMG,KAAKC,YAAYC,UAAvB,yBACJC,MACEN,EAAMG,KAAKC,YAAYC,WAAa,CAClCE,gBAAgB,OACdP,EAAMG,KAAKC,YAAYC,UAAUG,gBAAgBC,MAAMC,IAD1C,MAMnB,kBAAC,OAAD,CAAMC,GAAIX,EAAMG,KAAKS,OAAOC,KAAMZ,UAAU,kBAC1C,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,mBACXD,EAAMG,KAAKC,YAAYU,OAASd,EAAMG,KAAKS,OAAOC,UCRvDE,G,oBAAY,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KACbC,EAAYD,EAAKE,KAAKC,aAAaN,MACnCO,EAAWJ,EAAKE,KAAKC,aAAaE,KACxCC,QAAQC,IAAI,mCAAoCP,EAAKE,KAAKC,aAAaE,MACvE,IAAMG,EAAQR,EAAKS,kBAAkBC,MACjCC,EAAc,EAElB,OACE,kBAAC,IAAD,CAAQd,MAAOI,EAAWI,KAAMD,GAC9B,kBAAC,IAAD,CACEP,MAAM,YACNe,SAAU,CAAC,cAGZZ,EAAKE,KAAKC,aAAaU,aACtB,4BAAQ7B,UAAU,aAChB,wBAAIA,UAAU,mBACXgB,EAAKE,KAAKC,aAAaU,cAI9B,yBAAK7B,UAAU,aACZwB,EAAMM,KAAI,YAAe,IAAZ5B,EAAW,EAAXA,KAEZ,OADAyB,IAEE,kBAAC,EAAD,CACEI,IAAK7B,EAAKS,OAAOC,KACjBoB,MAAOL,EACPzB,KAAMA,EACND,UAAS,gBA0CR,mBAAAF,GAAK,OAClB,kBAAC,cAAD,CACEkC,MAnCY,aAoCZC,OAAQ,SAAAlB,GAAI,OACV,kBAAC,EAAD,eAAWD,SAAUhB,EAAMgB,SAAUhB,OAAK,EAACiB,KAAMA,GAAUjB,S","file":"component---src-pages-index-js-a2516b7409c555bcab25.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nexport default props => (\r\n  <article\r\n    className={`post-card post-card-large} ${ // ${props.count % 3 === 0 && `post-card-large`\r\n      props.postClass\r\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\r\n    style={\r\n      props.node.frontmatter.thumbnail && {\r\n        backgroundImage: `url(${\r\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\r\n        })`,\r\n      }\r\n    }\r\n  >\r\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\r\n      <div className=\"post-card-content\">\r\n        <h2 className=\"post-card-title\">\r\n          {props.node.frontmatter.title || props.node.fields.slug}\r\n        </h2>\r\n      </div>\r\n    </Link>\r\n  </article>\r\n)\r\n","import React from \"react\";\r\nimport { graphql, StaticQuery } from \"gatsby\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport SEO from \"../components/seo\";\r\nimport PostCard from \"../components/postCard\";\r\n\r\n// import \"../utils/global.scss\"\r\nimport \"../utils/normalize.css\";\r\nimport \"../utils/css/screen.css\";\r\n//TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\r\nconst BlogIndex = ({ data }, location) => {\r\n  const siteTitle = data.site.siteMetadata.title;\r\n  const siteIcon = data.site.siteMetadata.icon;\r\n  console.log('data.site.siteMetadata.icon :>> ', data.site.siteMetadata.icon);\r\n  const posts = data.allMarkdownRemark.edges;\r\n  let postCounter = 0;\r\n\r\n  return (\r\n    <Layout title={siteTitle} icon={siteIcon}>\r\n      <SEO\r\n        title=\"All posts\"\r\n        keywords={[`services`]}\r\n      />\r\n      {/* <Bio /> */}\r\n      {data.site.siteMetadata.description && (\r\n        <header className=\"page-head\">\r\n          <h2 className=\"page-head-title\">\r\n            {data.site.siteMetadata.description}\r\n          </h2>\r\n        </header>\r\n      )}\r\n      <div className=\"post-feed\">\r\n        {posts.map(({ node }) => {\r\n          postCounter++;\r\n          return (\r\n            <PostCard\r\n              key={node.fields.slug}\r\n              count={postCounter}\r\n              node={node}\r\n              postClass={`post`}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst indexQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            description\r\n            thumbnail {\r\n              childImageSharp {\r\n                fluid(maxWidth: 1360) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default props => (\r\n  <StaticQuery\r\n    query={indexQuery}\r\n    render={data => (\r\n      <BlogIndex location={props.location} props data={data} {...props} />\r\n    )}\r\n  />\r\n);\r\n"],"sourceRoot":""}